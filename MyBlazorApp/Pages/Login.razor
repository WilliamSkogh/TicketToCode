@using Microsoft.AspNetCore.Components.Authorization

@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider

<h3>Logga in</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red">@errorMessage</p>
}

<input @bind="username" placeholder="AnvÃ¤ndarnamn" />
<input @bind="password" type="password" />
<button @onclick="LoginUser">Logga in</button>

@code {
    private string username = "";
    private string password = "";
    private string errorMessage = "";

    private async Task LoginUser()
    {
        var response = await Http.PostAsJsonAsync("http://localhost:5235/auth/login", new { username, password });

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<AuthResponse>();

            if (result?.Access_Token != null)
            {
                await JS.InvokeVoidAsync("localStorage.setItem", "authToken", result.Access_Token);
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", result.Access_Token);

                // ðŸŸ¢ Uppdatera authentication state direkt
                await ((CustomAuthStateProvider)AuthStateProvider).AuthenticateUser();

                Navigation.NavigateTo("/admin", true);
            }
            else
            {
                errorMessage = "Inloggningen misslyckades.";
            }
        }
        else
        {
            errorMessage = "Felaktigt anvÃ¤ndarnamn eller lÃ¶senord";
        }
    }

    private class AuthResponse
    {
        public string? Access_Token { get; set; }
    }
}
