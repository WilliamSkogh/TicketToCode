@page "/events"
@inject HttpClient Http

<h1>Kommande Evenemang</h1>

@if (events == null)
{
    <p>Laddar evenemang...</p>
}
else if (!events.Any())
{
    <p>Inga evenemang att visa.</p>
}
else
{
    <div class="event-container">
        @foreach (var evt in events)
        {
            <div class="event-card">
                <h3>@ev.Name</h3>
                <p>@ev.Description</p>
                <p><strong>Start:</strong> @ev.Start.ToString("yyyy-MM-dd HH:mm")</p>
                <p><strong>Slut:</strong> @ev.End.ToString("yyyy-MM-dd HH:mm")</p>
                <p><strong>Max deltagare:</strong> @ev.MaxAttendees</p>
            </div>
        }
    </div>
}

@code {
    private List<Event> events = new();

   protected override async Task OnInitializedAsync()
{
    try
    {
        Console.WriteLine("üîÑ H√§mtar evenemang...");
        var response = await Http.GetAsync("http://localhost:5235/events");

        if (response.IsSuccessStatusCode)
        {
            events = await response.Content.ReadFromJsonAsync<List<Event>>();
            Console.WriteLine($"‚úÖ {events.Count} evenemang h√§mtade!");
        }
        else
        {
            Console.WriteLine($"‚ùå Fel vid h√§mtning av evenemang: {response.StatusCode}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"‚ùå Fel vid h√§mtning av evenemang: {ex.Message}");
    }
}


    public class Event
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public int Type { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public int MaxAttendees { get; set; }
    }
}
