@page "/admin"
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject EventService EventService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using MyBlazorApp.Services
@using TicketToCode.Core.Models

<head>
    <link rel="stylesheet" href="css/Admin.css">
    <link rel="stylesheet" href="css/Background.css">
</head>
<div class="admin-container">
<AuthorizeView>
    <Authorized Context="auth">
        @if (isAdmin)
        {
        <h3>Admin Panel</h3>
        <p>Här kan du hantera event!</p>

        <EditForm Model="newEvent" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label for="name">Namn:</label>
                <InputText id="name" @bind-Value="newEvent.Name" />
            </div>

            <div>
                <label for="description">Beskrivning:</label>
                <InputText id="description" @bind-Value="newEvent.Description" />
            </div>

            <div>
                <label for="type">Typ:</label>
                <InputSelect id="type" @bind-Value="newEvent.Type">
                    <option value="@EventType.Concert">Konsert</option>
                    <option value="@EventType.Festival">Festival</option>
                    <option value="@EventType.Theatre">Teater</option>
                    <option value="@EventType.Other">Annat</option>
                </InputSelect>
            </div>

            <div>
                <label for="start">Start:</label>
                <input type="datetime-local" @bind="newEvent.StartTime" />
            </div>

            <div>
                <label for="end">Slut:</label>
                <input type="datetime-local" @bind="newEvent.EndTime" />
            </div>

            <div>
                <label for="max">Max deltagare:</label>
                <InputNumber id="max" @bind-Value="newEvent.MaxAttendees" />
            </div>

            <button type="submit">Skapa event</button>
        </EditForm>

        @if (events != null && events.Any())
        {
            <h4>Befintliga event</h4>
            <ul>
                @foreach (var ev in events)
                {
                    <li>
                        <strong>@ev.Name</strong> – @ev.Type – @ev.StartTime.ToShortDateString()
                        <button @onclick="() => DeleteEvent(ev.Id)">Ta bort</button>
                    </li>
                }
            </ul>
        }

        @if (!string.IsNullOrWhiteSpace(successMessage))
        {
            <p style="color:@(successMessage.StartsWith("✅") ? "green" : "red")">
                @successMessage
            </p>
        }

        }
        else
        {
        <p>Du har inte behörighet att se denna sida.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>Du måste vara inloggad för att hantera event.</p>
        <button @onclick="Login">Logga in</button>
    </NotAuthorized>
</AuthorizeView>
</div>

@code {
    private bool isAdmin = false;
    private List<Event> events = new();

    private Event newEvent = new Event
{
    Name = "",
    Description = "",
    Type = EventType.Other,
    StartTime = DateTime.Now.AddMinutes(1)
                         .AddSeconds(-DateTime.Now.Second)
                         .AddMilliseconds(-DateTime.Now.Millisecond),
    EndTime = DateTime.Now.AddHours(1)
                          .AddSeconds(-DateTime.Now.Second)
                          .AddMilliseconds(-DateTime.Now.Millisecond),
    MaxAttendees = 100
};


    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAdmin = authState.User.IsInRole("Admin");

        if (isAdmin)
        {
            events = await EventService.GetEventsAsync();
        }
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine($"Skickar: {newEvent.StartTime} till {newEvent.EndTime}");

        var response = await EventService.CreateEventRawAsync(newEvent);

        if (response.IsSuccessStatusCode)
        {
            successMessage = "✅ Eventet har skapats!";
            newEvent = new Event
            {
                Name = "",
                Description = "",
                Type = EventType.Other,
                StartTime = DateTime.Now,
                EndTime = DateTime.Now.AddHours(1),
                MaxAttendees = 100
            };
            events = await EventService.GetEventsAsync(); 
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            successMessage = $"❌ Fel: {response.StatusCode} – {error}";
        }
    }

    private async Task DeleteEvent(int id)
    {
        var response = await EventService.DeleteEventAsync(id);
        if (response.IsSuccessStatusCode)
        {
            events = events.Where(e => e.Id != id).ToList();
            StateHasChanged();
        }
        else
        {
            successMessage = $"❌ Misslyckades att ta bort event med id {id}";
        }
    }

    private void Login()
    {
        Navigation.NavigateTo("/login");
    }
}
