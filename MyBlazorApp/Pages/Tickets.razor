@page "/tickets"
@using TicketToCode.Shared.Models
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager Navigation

<h1>Book your event with us</h1>

@if (_successMessage != null)
{
    <p style="color: green;">@_successMessage</p>
}
@if (_errorMessage != null)
{
    <p style="color: red;">@_errorMessage</p>
}

<EditForm Model="@ticket" OnValidSubmit="BuyTicket">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>First name:</label><br />
        <InputText @bind-Value="@ticket.FirstName" /><br /><br />
    </div>
    <div>
        <label>Last name:</label><br />
        <InputText @bind-Value="@ticket.LastName" /><br /><br />
    </div>
    <div>
        <label>Phone:</label><br />
        <InputText @bind-Value="@ticket.Phone" /><br /><br />
    </div>
    <div>
        <label>Email:</label><br />
        <InputText @bind-Value="@ticket.Email" /><br /><br />
    </div>

    <div>
        <label>Event:</label><br />
        @if (events == null || events.Count == 0)
        {
            <p>Loading events...</p> <!-- Visar medan events laddas -->
        }
        else
        {
            <InputSelect @bind-Value="@ticket.EventId" required>
                <option value="">Select an event</option>
                @foreach (var evt in events)
                {
                    <option value="@evt.Id">@evt.Name</option>
                }
            </InputSelect><br /><br />
        }
    </div>

    <div>
        <label>Number of tickets:</label><br />
        <InputNumber @bind-Value="@ticket.Quantity" /><br /><br />
    </div>
    <div>
        <label>Payment method:</label><br />
        <InputSelect @bind-Value="@ticket.PaymentMethod">
            <option value="">Select payment method</option>
            @foreach (var method in Enum.GetValues<PaymentMethod>())
            {
                <option value="@method">@method</option>
            }
        </InputSelect><br /><br />
    </div>

    <button type="submit">Book Ticket</button>
</EditForm>

@code {
    private Ticket ticket = new();
    private List<EventModel> events = new();

    private string? _successMessage;
    private string? _errorMessage;

    private class EventModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:5235/events");
            if (response.IsSuccessStatusCode)
            {
                events = await response.Content.ReadFromJsonAsync<List<EventModel>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching events: {ex.Message}");
        }
    }

    private async Task BuyTicket()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:5235/tickets", ticket);
            if (response.IsSuccessStatusCode)
            {
                _successMessage = "Ticket booked successfully!";
                _errorMessage = null;
                ticket = new(); // Nollställ formuläret
            }
            else
            {
                _errorMessage = "Booking failed.";
                _successMessage = null;
            }
        }
        catch
        {
            _errorMessage = "Something went wrong.";
            _successMessage = null;
        }
    }
}
