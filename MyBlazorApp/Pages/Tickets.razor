@page "/tickets"
@using TicketToCode.Core.Models
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Tickets</h3>

<label for="ticketType">Hur många dagar?:</label>
<select @bind="_selectedTicketType" id="ticketType">
    <option value="1">1 dag</option>
    <option value="2">2 dagar</option>
    <option value="3">3 dagar</option>
</select>

@if (_selectedTicketType == 1 || _selectedTicketType == 2)
{
    @foreach (var day in _availableDays)
    {
        <label style="margin-right: 1rem;">
            <input type="checkbox"
                   @onchange="@(() => ToggleDay(day.Value))"
                   checked="@_selectedDays.Contains(day.Value)" />
            @day.Label
        </label>
    }
}

<button @onclick="BuyTicket">Köp biljett</button>

@if (_successMessage != null)
{
    <p style="color: green;">@_successMessage</p>
}

@if (_errorMessage != null)
{
    <p style="color: red;">@_errorMessage</p>
}

@code {
    private int _selectedTicketType = 1;
    private List<DaySelection> _selectedDays = new();

    private List<DayOption> _availableDays = new()
    {
        new DayOption { Label = "Fredag", Value = DaySelection.Friday },
        new DayOption { Label = "Lördag", Value = DaySelection.Saturday },
        new DayOption { Label = "Söndag", Value = DaySelection.Sunday }
    };

    private string? _successMessage;
    private string? _errorMessage;

    private void ToggleDay(DaySelection day)
    {
        if (_selectedDays.Contains(day))
            _selectedDays.Remove(day);
        else
            _selectedDays.Add(day);
    }

    private async Task BuyTicket()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.Identity?.IsAuthenticated ?? true)
        {
            _errorMessage = "Logga in för att boka biljetter";
            return;
        }

        var userId = user.FindFirst("sub")?.Value ?? user.Identity.Name;
        var email = user.FindFirst("email")?.Value ?? "okänd@domän.se";

        // Om 3 dagar väljs, välj alla automatiskt
        if (_selectedTicketType == 3)
        {
            _selectedDays = _availableDays.Select(d => d.Value).ToList();
        }

        var newTicket = new Ticket
        {
            UserId = userId,
            UserEmail = email,
            TicketType = _selectedTicketType,
            SelectedDays = _selectedDays
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/ticket", newTicket);
            if (response.IsSuccessStatusCode)
            {
                _successMessage = "Biljett köpt!";
                _errorMessage = null;
            }
            else
            {
                var details = await response.Content.ReadAsStringAsync();
                _errorMessage = $"Kunde inte köpa biljett. API sa: {details}";
                _successMessage = null;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Fel: {ex.Message}";
        }
    }

    public class Ticket
    {
        public string UserId { get; set; } = string.Empty;
        public string? UserEmail { get; set; }
        public int TicketType { get; set; }
        public List<DaySelection> SelectedDays { get; set; } = new();
    }

    public class DayOption
    {
        public string? Label { get; set; }
        public DaySelection Value { get; set; }
    }
}
