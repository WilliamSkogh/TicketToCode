@page "/tickets"
@using MyBlazorApp.Services
@using TicketToCode.Core.Models
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject EventService EventService

<head>
    <link rel="stylesheet" href="css/ticket.css">
    <link rel="stylesheet" href="css/Background.css">
</head>
<h3>Tickets</h3>

<div class="ticket-page">
    <div class="ticket-form">
<label for="ticketType">Hur många dagar?:</label>
<select @bind="_selectedTicketType" id="ticketType">
    <option value="1">1 dag</option>
    <option value="2">2 dagar</option>
    <option value="3">3 dagar</option>
</select>

@if (_selectedTicketType == 1 || _selectedTicketType == 2)
{
    @foreach (var day in _availableDays)
    {
        var isChecked = _selectedDays.Contains(day.Value);
        var isDisabled = _selectedTicketType == 2 && !isChecked && _selectedDays.Count >= 2;

        <label style="margin-right: 1rem;">
            <input type="checkbox"
                   checked="@isChecked"
                   @onchange="(e => CheckboxChanged(day.Value, e.Value as bool? ?? false))"
                   disabled="@isDisabled" />
            @day.Label
        </label>
    }

}

<button @onclick="BuyTicket">Köp biljett</button>

@if (_successMessage != null)
{
    <p style="color: green;">@_successMessage</p>
}

@if (_errorMessage != null)
{
    <p style="color: red;">@_errorMessage</p>
}
</div>
<div class="ticket-stats-box">
    <h3>Sålda biljetter per dag</h3>

    @if (soldTickets != null)
    {
        <ul>
            @foreach (var item in soldTickets.OrderBy(x => x.Day))
            {
                <li>@item.Day: @item.SoldTickets biljetter sålda av 500</li>
            }
        </ul>
    }
    else
    {
        <p>Laddar...</p>
    }
</div>

@code {
    private int _selectedTicketType = 1;
    private List<DaySelection> _selectedDays = new();

    private List<DayOption> _availableDays = new()
    {
        new DayOption { Label = "Fredag", Value = DaySelection.Friday },
        new DayOption { Label = "Lördag", Value = DaySelection.Saturday },
        new DayOption { Label = "Söndag", Value = DaySelection.Sunday }
    };

    private string? _successMessage;
    private string? _errorMessage;

    private List<EventService.TicketsSoldDto>? soldTickets;

    protected override async Task OnInitializedAsync()
    {
        soldTickets = await EventService.GetTicketsSoldPerDay();
    }

    private async Task BuyTicket()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.Identity?.IsAuthenticated ?? true)
        {
            _errorMessage = "Logga in för att boka biljetter";
            return;
        }

        var userId = user.FindFirst("sub")?.Value ?? user.Identity.Name;
        var email = user.FindFirst("email")?.Value ?? "okänd@domän.se";

        if (_selectedTicketType == 3)
        {
            _selectedDays = _availableDays.Select(d => d.Value).ToList();
        }

        var newTicket = new Ticket
        {
            UserId = userId,
            UserEmail = email,
            TicketType = _selectedTicketType,
            SelectedDays = _selectedDays
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/ticket", newTicket);
            if (response.IsSuccessStatusCode)
            {
                _successMessage = "Biljett köpt!";
                _errorMessage = null;
            }
            else
            {
                var details = await response.Content.ReadAsStringAsync();
                _errorMessage = $"Kunde inte köpa biljett. API sa: {details}";
                _successMessage = null;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Fel: {ex.Message}";
        }
    }

    private void CheckboxChanged(DaySelection day, bool isChecked)
    {
        if (_selectedTicketType == 1)
        {
            _selectedDays.Clear();
            if (isChecked)
            {
                _selectedDays.Add(day);
            }
        }
        else if (_selectedTicketType == 2)
        {
            if (isChecked)
            {
                if (_selectedDays.Count < 2)
                {
                    _selectedDays.Add(day);
                }
            }
            else
            {
                _selectedDays.Remove(day);
            }
        }
    }

    public class Ticket
    {
        public string UserId { get; set; } = string.Empty;
        public string? UserEmail { get; set; }
        public int TicketType { get; set; }
        public List<DaySelection> SelectedDays { get; set; } = new();
    }

    public class DayOption
    {
        public string? Label { get; set; }
        public DaySelection Value { get; set; }
    }
    }
    </div>