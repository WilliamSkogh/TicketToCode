@page "/tickets"
@using TicketToCode.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<<<<<<< HEAD
<h1>Book your event with us</h1>
=======
<head>
    <link rel="stylesheet" href="css/tickets.css">
    <link rel="stylesheet" href="css/Background.css">
</head>
<div class="admin-container">
<h3>Tickets</h3>
>>>>>>> origin/main

<EditForm Model="@ticket" OnValidSubmit="SubmitTicket">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>First name:</label><br />
        <InputText @bind-Value="@ticket.FirstName" /><br /><br />
    </div>
    <div>
        <label>Last name:</label><br />
        <InputText @bind-Value="@ticket.LastName" /><br /><br />
    </div>
    <div>
        <label>Phone:</label><br />
        <InputText @bind-Value="@ticket.Phone" /><br /><br />
    </div>
    <div>
        <label>Email:</label><br />
        <InputText @bind-Value="@ticket.Email" /><br /><br />
    </div>
    <div>
        <label>Event:</label><br />
        <InputSelect @bind-Value="@ticket.EventId">
            <option value="">Select an event</option>
            @foreach (var ev in events)
            {
                <option value="@ev.Id">@ev.Name</option>
            }
        </InputSelect><br /><br />
    </div>
    <div>
        <label>Number of tickets:</label><br />
        <InputNumber @bind-Value="@ticket.Quantity" /><br /><br />
    </div>
    <div>
        <label>Payment method:</label><br />
        <InputSelect @bind-Value="@ticket.PaymentMethod">
            <option value="">Select payment method</option>
            @foreach (var method in Enum.GetValues<PaymentMethod>())
            {
                <option value="@method">@method</option>
            }
        </InputSelect><br /><br />
    </div>

<<<<<<< HEAD
    <button type="submit">Book Ticket</button>
</EditForm>

=======

<button @onclick="BuyTicket">KÃ¶p biljett</button>

@if (_successMessage != null)
{
<p style="color: green;">@_successMessage</p>
}

@if (_errorMessage != null)
{
<p style="color: red;">@_errorMessage</p>
}
</div>
>>>>>>> origin/main
@code {
    private Ticket ticket = new();
    private List<EventModel> events = new();

    private class EventModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:5235/events");
            if (response.IsSuccessStatusCode)
            {
                events = await response.Content.ReadFromJsonAsync<List<EventModel>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching events: {ex.Message}");
        }
    }

    private async Task SubmitTicket()
    {
        var response = await Http.PostAsJsonAsync("https://localhost:5235/tickets", ticket);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/booking/confirmation");
        }
        else
        {
            Console.WriteLine("Ticket booking failed");
        }
    }
}
